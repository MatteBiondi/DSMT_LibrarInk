% These parameters will be available at run-time for the specified application, use application:get_env/2 to retrieve
% the value
[
  {kernel, [
    {logger_level, debug},
    {logger, [
      {handler, default, logger_std_h, #{
        level => info,
        formatter => {logger_formatter, #{template => ["[",level,"]","[",time,"]","[",pid,"]","[",mfa,"]","\t",msg,
          "\n"], single_line => true, time_designator=>$\s}},
        filters => [{librarink_filter, {fun logger_filters:domain/2, {log, equal , [librarink]}}}]
      }},
      {handler, debug_handler, logger_std_h, #{
        level => info,
        config => #{file => "logs/debug.log"},
        formatter => {logger_formatter, #{template => ["[",level,"]","[",time,"]","[",pid,"]","[",mfa,"]","\t",msg,
          "\n"], single_line => false, time_designator=>$\s}}
      }},
      {handler, error_handler, logger_std_h, #{
        level => error,
        config => #{file => "logs/error.log"},
        formatter => {logger_formatter, #{template => ["[",level,"]","[",time,"]","[",pid,"]","[",mfa,"]","\t",msg,
          "\n"],  single_line => false, time_designator=>$\s}}
      }}
    ]}
  ]},
  {librarink_websocket, [{port, 5000},{timeout, 180000},{framesize, 1024},{logger_domain, [librarink]}]},
  {librarink_mqs, [{host, "172.18.0.28"},{user, <<"librarink">>}, {password, <<"root">>}, {logger_domain,
    [librarink]}]},
  {librarink_proxy, [
    {proxy_name, proxy},
    {mqs_host, "172.18.0.28"},
    {mqs_user, <<"librarink">>},
    {mqs_password, <<"root">>},
    {exchange_type, <<"fanout">>},
    {routing_key, <<"">>},
    {request_timeout, 30000},
    {mnesia_name, librarink_mnesiaDB},
    {mnesia_nodes, [{'librarink@172.18.0.29', 'librarink@172.18.0.29'}]},
    {logger_domain, [librarink]}
  ]},
  %Define Mnesia DB directory
  {mnesia, [{dir, "librarink_db_files"}]},
  {librarink_mnesiaDB, [{active_nodes,['librarink@172.18.0.29']}, {backup_nodes,[]}]}
].
